// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class ArmorConfig 
{	
	/// <summary>
	/// The m armor map. The initialization of this piece should determine
	/// which sets of armor are available to equip to this configuration.
	/// </summary>
	private Dictionary<ArmorPosition, Armor> mArmorMap;

	/// <summary>
	/// The m equiped armor.
	/// </summary>
	private Armor[] mEquipedArmor;

	public ArmorConfig(HashSet<ArmorPosition> allowedArmorSlots) {
		mArmorMap = new Dictionary<ArmorPosition, Armor> ();
		foreach (ArmorPosition position in allowedArmorSlots) {
			mArmorMap[position] = Armor.EMPTY_ARMOR;
		}
	}

	public Armor[] equipedArmor {
		get { return mEquipedArmor; }
	}

	/// <summary>
	/// Equips the armor.
	/// </summary>
	/// <param name="armor">Armor.</param>
	/// <param name="position">Position.</param>
	public void EquipArmor(Armor armor, ArmorPosition position) {
		if (!mArmorMap.ContainsKey (position)) {
			return; // ignore a position we should not have
		}

		if (armor == null) {
			armor = Armor.EMPTY_ARMOR;
		}

		mArmorMap [position] = armor;
		RebuildEquipedArray ();
	}

	/// <summary>
	/// Rebuilds the equiped array.
	/// </summary>
	private void RebuildEquipedArray() {
		List<Armor> newEquipedArray = new List<Armor> ();
		foreach (Armor armor in mArmorMap.Values) {
			if(armor != Armor.EMPTY_ARMOR) {
				newEquipedArray.Add(armor);
			}
		}

		mEquipedArmor = newEquipedArray.ToArray ();
	}

	/// <summary>
	/// Gets or sets the <see cref="ArmorConfig"/> with the specified position.
	/// </summary>
	/// <param name="position">Position.</param>
	public Armor this[ArmorPosition position] {
		get {
			return mArmorMap[position];
		}

		set {
			EquipArmor(value, position);
		}
	}

}

