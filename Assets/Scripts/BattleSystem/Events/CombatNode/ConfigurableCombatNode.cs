//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

public class ConfigurableCombatNode : IOffensiveCombatNode
{


	public ConfigurableCombatNode ()
	{
		// sets defaults
		powerPhysicalAdd = 0f;
		powerMagicalAdd = 0f;
		resistIgnoreAdd = 0f;
		totalDamageAdd = 0f;
		critChanceAdd = 0f;
		armorIgnoreAdd = 0f;
		dodgeIgnoreAdd = 0f;
		accuracyAdd = 0f;
		
		powerPhysicalMultiply = 1f;
		powerMagicalMultiply = 1f;
		resistIgnoreMultiply = 1f;
		totalDamageMultiply = 1f;
		critChanceMultiply = 1f;
		armorIgnoreMultiply = 1f;
		dodgeIgnoreMultiply = 1f;
		accuracyMultiply = 1f;

		statSTRAdd = 0f;
		statVITAdd = 0f;
		statDEXAdd = 0f;
		statAGIAdd = 0f;
		statINTAdd = 0f;
		statWISAdd = 0f;
		statLUCKAdd = 0f;

		statSTRMultiply = 1f;
		statVITMultiply = 1f;
		statDEXMultiply = 1f;
		statAGIMultiply = 1f;
		statINTMultiply = 1f;
		statWISMultiply = 1f;
		statLUCKMultiply = 1f;
	}

	/// <summary>
	/// Read and load the general modifiers.
	/// </summary>
	/// <param name="modifiers">Modifiers.</param>
	public void ReadGeneralModifiers(GeneralOffensiveModifier [] modifiers) {
		// parse out general
		if(modifiers != null) {
			foreach(GeneralOffensiveModifier mod in modifiers) {
				switch(mod.type) {
				case GeneralOffensiveModifierType.TOTAL_DMG_ADD:
					this.totalDamageAdd = mod.modValue;
					break;
				case GeneralOffensiveModifierType.TOTAL_DMG_MULTIPLY:
					this.totalDamageMultiply = mod.modValue;
					break;	
				case GeneralOffensiveModifierType.CRIT_CHANCE_ADD:
					this.critChanceAdd = mod.modValue;
					break;
				case GeneralOffensiveModifierType.CRIT_CHANCE_MULTIPLY:
					this.critChanceMultiply = mod.modValue;
					break;
				}
			}
		}
	}

	public void ReadStatModifiers(StatModifier [] modifiers) {
		// parse out general
		if(modifiers != null) {
			foreach(StatModifier mod in modifiers) {
				switch(mod.stat) {
				case StatType.STR:
					this.statSTRMultiply = mod.mod;
					break;				
				case StatType.VIT:
					this.statVITMultiply = mod.mod;
					break;
				case StatType.DEX:
					this.statDEXMultiply = mod.mod;
					break;
				case StatType.AGI:
					this.statAGIMultiply = mod.mod;
					break;
				case StatType.INT:
					this.statINTMultiply = mod.mod;
					break;
				case StatType.WIS:
					this.statWISMultiply = mod.mod;
					break;
				case StatType.LUCK:
					this.statLUCKMultiply = mod.mod;
					break;
				}
			}
		}
	}

	public void ReadPhysicalModifiers(PhysicalOffensiveModifier [] modifiers) {
		// parse out physical
		if(modifiers != null) {
			foreach(PhysicalOffensiveModifier mod in modifiers) {
				switch(mod.type) {
				case PhysicalOffensiveModifierType.POWER_PHYSICAL_ADD:
					this.powerPhysicalAdd = mod.modValue;
					break;
				case PhysicalOffensiveModifierType.POWER_PHYSICAL_MULTIPLY:
					this.powerPhysicalMultiply = mod.modValue;
					break;
				case PhysicalOffensiveModifierType.ARMOR_IGNORE_ADD:
					this.armorIgnoreAdd = mod.modValue;
					break;
				case PhysicalOffensiveModifierType.ARMOR_IGNORE_MULTIPLY:
					this.armorIgnoreMultiply = mod.modValue;
					break;					
				case PhysicalOffensiveModifierType.DODGE_IGNORE_ADD:
					this.dodgeIgnoreAdd = mod.modValue;
					break;
				case PhysicalOffensiveModifierType.DODGE_IGNORE_MULTIPLY:
					this.dodgeIgnoreMultiply = mod.modValue;
					break;					
				}
			}
		}		
	}

	public void ReadMagicalModifiers(MagicalOffensiveModifier [] modifiers) {
		// parse out physical
		if(modifiers != null) {
			foreach(MagicalOffensiveModifier mod in modifiers) {
				switch(mod.type) {
				case MagicalOffensiveModifierType.POWER_MAGICAL_ADD:
					this.powerMagicalAdd = mod.modValue;
					break;
				case MagicalOffensiveModifierType.POWER_MAGICAL_MULTIPLY:
					this.powerMagicalMultiply = mod.modValue;
					break;
				case MagicalOffensiveModifierType.RESIST_IGNORE_ADD:
					this.resistIgnoreAdd = mod.modValue;
					break;
				case MagicalOffensiveModifierType.RESIST_IGNORE_MULTIPLY:
					this.resistIgnoreMultiply = mod.modValue;
					break;					
				}
			}
		}		
	}
	
	public float powerPhysicalAdd {
		protected set;
		get;
	}
	
	public float powerPhysicalMultiply {
		protected set;
		get;
	}
	
	public float totalDamageAdd {
		protected set;
		get;
	}
	
	public float totalDamageMultiply {
		protected set;
		get;
	}
	
	public float critChanceAdd {
		protected set;
		get;
	}
	
	public float critChanceMultiply {
		protected set;
		get;
	}
	
	public float armorIgnoreAdd {
		protected set;
		get;
	}
	
	public float armorIgnoreMultiply {
		protected set;
		get;
	}
	
	public float dodgeIgnoreAdd {
		protected set;
		get;
	}
	
	public float dodgeIgnoreMultiply {
		protected set;
		get;
	}
	public float powerMagicalAdd {
		protected set;
		get;
	}

	public float powerMagicalMultiply {
		protected set;
		get;
	}

	public float resistIgnoreAdd {
		protected set;
		get;
	}

	public float resistIgnoreMultiply {
		protected set;
		get;
	}

	public float statSTRMultiply {
		protected set;
		get;
	}

	public float statVITMultiply {
		protected set;
		get;
	}

	public float statDEXMultiply {
		protected set;
		get;
	}

	public float statAGIMultiply {
		protected set;
		get;
	}

	public float statINTMultiply {
		protected set;
		get;
	}

	public float statWISMultiply {
		protected set;
		get;
	}

	public float statLUCKMultiply {
		protected set;
		get;
	}

	public float statSTRAdd {
		protected set;
		get;
	}

	public float statVITAdd {
		protected set;
		get;
	}

	public float statDEXAdd {
		protected set;
		get;
	}

	public float statAGIAdd {
		protected set;
		get;
	}

	public float statINTAdd {
		protected set;
		get;
	}

	public float statWISAdd {
		protected set;
		get;
	}

	public float statLUCKAdd {
		protected set;
		get;
	}

	public float accuracyAdd {
		protected set;
		get;
	}

	public float accuracyMultiply {
		protected set;
		get;
	}
}


