//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class CompositeCombatModifierNode : IOffensiveCombatNode
{
	private List<IOffensiveCombatNode> mChildren;

	public CompositeCombatModifierNode ()
	{
		mChildren = new List<IOffensiveCombatNode>();
	}

	public void AddNode(IOffensiveCombatNode combatNode) {
		mChildren.Add (combatNode);
	}

	public float powerPhysicalAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.powerPhysicalAdd;
			}
			return total;
		}
	}

	public float powerPhysicalMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.powerPhysicalMultiply;
			}
			return total;
		}
	}

	public float powerMagicalAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.powerPhysicalAdd;
			}
			return total;
		}
	}

	public float powerMagicalMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.powerPhysicalMultiply;
			}
			return total;
		}
	}

	public float resistIgnoreAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.resistIgnoreAdd;
			}
			return total;
		}
	}

	public float resistIgnoreMultiply {
		get {			
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.resistIgnoreMultiply;
			}
			return total;
		}
	}
	
	public float accuracyAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.accuracyAdd;
			}
			return total;
		}
	}
	
	public float accuracyMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.accuracyMultiply;
			}
			return total;
		}
	}

	public float totalDamageAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.totalDamageAdd;
			}
			return total;
		}
	}

	public float totalDamageMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.totalDamageMultiply;
			}
			return total;
		}
	}

	public float critChanceAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.critChanceAdd;
			}
			return total;
		}
	}

	public float critChanceMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.critChanceMultiply;
			}
			return total;
		}
	}

	public float armorIgnoreAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.armorIgnoreAdd;
			}
			return total;
		}
	}

	public float armorIgnoreMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.armorIgnoreMultiply;
			}
			return total;
		}
	}

	public float dodgeIgnoreAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.dodgeIgnoreAdd;
			}
			return total;
		}
	}

	public float dodgeIgnoreMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.dodgeIgnoreMultiply;
			}
			return total;
		}
	}
	public float statSTRMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.statSTRMultiply;
			}
			return total;
		}
	}

	public float statVITMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.statVITMultiply;
			}
			return total;
		}
	}

	public float statDEXMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.statDEXMultiply;
			}
			return total;
		}
	}

	public float statAGIMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.statAGIMultiply;
			}
			return total;
		}
	}

	public float statINTMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.statINTMultiply;
			}
			return total;
		}
	}

	public float statWISMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.statWISMultiply;
			}
			return total;
		}
	}

	public float statLUCKMultiply {
		get {
			float total = 1;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total *= mod.statLUCKMultiply;
			}
			return total;
		}
	}

	public float statSTRAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.statSTRAdd;
			}
			return total;
		}
	}

	public float statVITAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.statVITAdd;
			}
			return total;
		}
	}

	public float statDEXAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.statDEXAdd;
			}
			return total;
		}
	}

	public float statAGIAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.statAGIAdd;
			}
			return total;
		}
	}

	public float statINTAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.statINTAdd;
			}
			return total;
		}
	}

	public float statWISAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.statWISAdd;
			}
			return total;
		}
	}

	public float statLUCKAdd {
		get {
			float total = 0;
			foreach(IOffensiveCombatNode mod in mChildren) {
				total += mod.statLUCKAdd;
			}
			return total;
		}
	}
}


