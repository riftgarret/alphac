// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class OffensiveCombatResolver
{

	private HashSet<IOffensiveCombatNode> mUsedCombatNodes;
	private IOffensiveCombatNode mRootNode;

	public OffensiveCombatResolver (IOffensiveCombatNode rootNode)
	{
		mRootNode = rootNode;
	}

	public float GetProperty(OffensiveCombatNodeProperty property) {
		float ret = mRootNode.GetPropertyAdd (property);
		ret *= mRootNode.GetPropertyMultiply (property);
		return ret;
	}

	public float GetAccuracy() {
		return GetProperty(OffensiveCombatNodeProperty.ACCURACY);
	}

	public float GetPhysicalDamage() {
		float totalDamage = GetProperty (OffensiveCombatNodeProperty.TOTAL_DAMAGE);

		float strScale = GetProperty (OffensiveCombatNodeProperty.MAG_SCALE_STR);
		if (strScale >= 0) {

		}
		return totalDamage;
	}

	public float GetMagicalDamage() {
		float totalDamage = GetProperty (OffensiveCombatNodeProperty.TOTAL_DAMAGE);
		return totalDamage;
	}

	public float GetPhysicalPower() {
		return GetProperty(OffensiveCombatNodeProperty.POWER_PHYSICAL);
	}

	public float GetMagicalPower() {
		return GetProperty(OffensiveCombatNodeProperty.POWER_MAGIC);
	}

	/// <summary>
	/// Gets the crit chance.
	/// </summary>
	/// <returns>The crit chance.</returns>
	public float GetCritChance() {
		return GetProperty(OffensiveCombatNodeProperty.CRIT_CHANCE);
	}


	/*
	 * 	// common
	TOTAL_DAMAGE,
	CRIT_CHANCE,
	RESIST_IGNORE,
	PHY_SCALE_STR, // by default there shouldnt be any scaling, unless on weapon or buff
	PHY_SCALE_VIT,
	PHY_SCALE_DEX,
	PHY_SCALE_AGI,
	PHY_SCALE_INT,
	PHY_SCALE_WIS,
	PHY_SCALE_LUCK,
	MAG_SCALE_STR, // by default there shouldnt be any scaling, unless on weapon or buff
	MAG_SCALE_VIT,
	MAG_SCALE_DEX,
	MAG_SCALE_AGI,
	MAG_SCALE_INT,
	MAG_SCALE_WIS,
	MAG_SCALE_LUCK,
	STR,
	VIT,
	DEX,
	AGI,
	INT,
	WIS,
	LUCK,
	// magic
	POWER_MAGIC,
	// physical
	POWER_PHYSICAL,
	REFLEX_IGNORE,
	ACCURACY,

*/
}
