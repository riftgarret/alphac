//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class BattleEventOptions
{
	public static readonly BattleEventOptions EMPTY = new BattleEventOptions();

	private IStatusEffect[] mDestStatusEffects = null;
	public IStatusEffect[] destStatusEffects {
		get { return mDestStatusEffects; }
	}

	private IStatusEffect[] mSrcStatusEffects = null;
	public IStatusEffect[] srcStatusEffects {
		get { return mSrcStatusEffects; }
	}

	private OffensiveModifier[] mOffensiveModifiers = null;
	public OffensiveModifier[] offensiveModifiers {
		get { return mOffensiveModifiers; }
	}

	private BattleEventOptions () {	}

	/// <summary>
	/// Builder this instance.
	/// </summary>
	public static OptionBuilder Builder() {
		return new OptionBuilder();
	}

	public class OptionBuilder {
		private List<IStatusEffect> mSrcEffects = null;
		private List<IStatusEffect> mDestEffects = null;
		private List<OffensiveModifier> mOffensiveModifiers = null;

		public OptionBuilder AddSourceStatusEffect(IStatusEffect effect) {
			if(mSrcEffects == null) {
				mSrcEffects = new List<IStatusEffect>();
			}
			mSrcEffects.Add(effect);
			return this;
		}

		public OptionBuilder AddDestStatusEffect(IStatusEffect effect) {
			if(mDestEffects == null) {
				mDestEffects = new List<IStatusEffect>();
			}
			mDestEffects.Add(effect);
			return this;
		}

		public OptionBuilder AddOffensiveModifier(OffensiveModifierType offensiveType, float modValue) {
			if(mOffensiveModifiers == null) {
				mOffensiveModifiers = new List<OffensiveModifier>();
			}
			mOffensiveModifiers.Add(new OffensiveModifier(offensiveType, modValue));
			return this;
		}

		public BattleEventOptions Build() {
			BattleEventOptions parameter = new BattleEventOptions();
			if(mSrcEffects != null) {
				parameter.mSrcStatusEffects = mSrcEffects.ToArray();
			}

			if(mDestEffects != null) {
				parameter.mDestStatusEffects = mDestEffects.ToArray();
			}

			if(mOffensiveModifiers != null) {
				parameter.mOffensiveModifiers = mOffensiveModifiers.ToArray();
			}

			return parameter;
		}
	}
}
