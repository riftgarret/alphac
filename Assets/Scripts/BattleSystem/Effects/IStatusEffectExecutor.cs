//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

public interface IStatusEffectExecutor
{
	StatusEffectGroupSO statusEffectGroup {
		get;
	}

	/// <summary>
	/// The Source Type is used to determine which resist to check to see if 
	/// the effect is resisted
	/// </summary>
	/// <value>The type of the source.</value>
	StatusEffectProperty effectType {
		get;
	}
	
	/// <summary>
	/// Gets a value indicating whether this <see cref="IStatusEffect"/> is dispellable. This is ignored if sourceType is NEGATIVE_PHYSICAL
	/// </summary>
	/// <value><c>true</c> if is dispellable; otherwise, <c>false</c>.</value>
	bool isDispellable {
		get;
	}

	/// <summary>
	/// Gets a value indicating whether this <see cref="IStatusEffect"/> is curable. This is ignored if sourceType is POSITIVE
	/// </summary>
	/// <value><c>true</c> if is curable; otherwise, <c>false</c>.</value>
	bool isCurable {
		get;
	}

	/// <summary>
	/// Gets the total length of the duration. How long should it exist before it removes naturally
	/// </summary>
	/// <value>The total length of the duration.</value>
	float totalDurationLength {
		get;
	}	

	/// <summary>
	/// Gets the length of the current duration.
	/// </summary>
	/// <value>The length of the current duration.</value>
	float currentDurationLength {
		get;
	}

	bool isExpired {
		get;
	}

	/// <summary>
	/// Increments the duration time.
	/// </summary>
	/// <param name="timeDelta">Time delta.</param>
	void IncrementDurationTime(float timeDelta);	
}


