// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;

/// <summary>
/// System class to have references to all types of singleton type instances
/// </summary>
public class BattleSystem
{

	// singleton instance
	private static BattleSystem sSingleton;

	// private members to keep instantiated
	private BattleManager mBattleManager;
	private BattleEventManager mEventManager;
	private CombatOperationExecutor mCombatExecutor;

	public static BattleSystem Instance() {
		if (sSingleton == null) {
			sSingleton = new BattleSystem();
		}
		return sSingleton;
	}

	private BattleSystem ()
	{
		// nothing, init with BattleManager
	}

	/// <summary>
	/// Initialize our battle system 
	/// </summary>
	/// <param name="manager">Manager.</param>
	public void Init(BattleManager manager) {
		mBattleManager = manager;
		mEventManager = new BattleEventManager();
		mCombatExecutor = new CombatOperationExecutor();
	}

	/// <summary>
	/// Gets the battle manager.
	/// </summary>
	/// <value>The battle manager.</value>
	public static BattleManager battleManager {
		get { return Instance().mBattleManager; }
	}

	/// <summary>
	/// Gets the event manager.
	/// </summary>
	/// <value>The event manager.</value>
	public static BattleEventManager eventManager {
		get { return Instance().mEventManager; }
	}

	/// <summary>
	/// Gets the combat executor.
	/// </summary>
	/// <value>The combat executor.</value>
	public static CombatOperationExecutor combatExecutor {
		get { return Instance().mCombatExecutor; }
	}
}
