//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;

public class PhysicalAttackOperation : AbstractCombatOperation
{
	private const float CRIT_MULTIPLIER_LOW = 1.5f;
	private const float CRIT_MULTIPLIER_HIGH = 1.8f;

	private BattleEntity mSrcEntity;
	private BattleEntity mDestEntity;

	private DamageType mDmgType;
	private bool mIsEvaded;
	private bool mIsCrit;
	private float mTotalDamage;

	public PhysicalAttackOperation (BattleEntity src, 
	                            BattleEntity dest, 
	                            BattleActionPhysical action, 
	                            DamageType damageType)
	{
		this.mSrcEntity = src;
		this.mDestEntity = dest;

		mIsEvaded = false;
		mIsCrit = false;
		mDmgType = damageType;
	}
	
	public override void Execute (CombatResolver srcResolver, CombatResolver destResolver)
	{
		// check dodge before anything
		float srcChanceToHit = srcResolver.GetAccuracy ();
		float reflex = destResolver.GetResist();
		float chanceToHit = srcChanceToHit / (srcChanceToHit + reflex); 
		
		// TODO add chanceToHit increase
		if(UnityEngine.Random.Range(0f, 1f) > chanceToHit) {
			// missed
			mIsEvaded = true;
			return;
		}
		
		// TODO set base damage in damage node or use total damage
		float dmg = srcResolver.GetPhysicalDamage ();
		
		float damageSum = UnityEngine.Random.Range(dmg * 0.8f, dmg * 1.2f); // tmp
		
		
		// calculate crit chance
		float srcCritChance = srcResolver.GetCritChance();
		float critDefense = destResolver.GetCritDefense();
		float critChance = srcCritChance / (srcCritChance + critDefense); 
		// TODO factor in other chances
		if(UnityEngine.Random.Range(0f, 1f) <= critChance) {
			damageSum *= UnityEngine.Random.Range(CRIT_MULTIPLIER_LOW, CRIT_MULTIPLIER_HIGH); // crit
			mIsCrit = true;
		}
		
		// now calculate damage reduction from opponent
		// TODO override dmg type if special attack
		float resistValue = destResolver.GetResist(mDmgType);
		
		// result damage should be same type of calculation
		mTotalDamage = damageSum * damageSum / (damageSum + resistValue);
		mTotalDamage = Mathf.Ceil(mTotalDamage);

		ExecuteDamage (mTotalDamage);
	}
}


